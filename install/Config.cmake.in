@PACKAGE_INIT@


function(@PROJECT_NAME@_include_config_files target)

    foreach(config_name ${ARGN})

        set(config_filename "${target}${config_name}.cmake")
        set(config_filepath "${CMAKE_CURRENT_LIST_DIR}/${target}/${config_filename}")

        if(EXISTS "${config_filepath}")
            include("${config_filepath}")
        endif()

    endforeach()

    if(NOT DEFINED ${CMAKE_FIND_PACKAGE_NAME}_NOT_FOUND_MESSAGE)
        set(@PROJECT_NAME@_${target}_FOUND 1 PARENT_SCOPE)
    endif()

endfunction()






# define available component
set(@PROJECT_NAME@_supported_components @__CMUT__INSTALL__PROJECT_SUPPORTED_COMPONENTS@)


# search dependecies
include(CMakeFindDependencyMacro)
include(${CMAKE_CURRENT_LIST_DIR}/dependencies/include_all.cmake)



foreach(_comp ${@PROJECT_NAME@_FIND_COMPONENTS})

    if (NOT "${@PROJECT_NAME@_supported_components}" MATCHES ${_comp})
        set(@PROJECT_NAME@_FOUND False)
        list(APPEND @PROJECT_NAME@_unsupported_components ${_comp})
    else()
        if(IS_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/${_comp})
            @PROJECT_NAME@_include_config_files( ${_comp} Target)
        endif()
    endif()

endforeach()

if(@PROJECT_NAME@_unsupported_components)
    set(@PROJECT_NAME@_NOTFOUND_MESSAGE "Unsupported component: ${@PROJECT_NAME@_unsupported_components}")
    message(ERROR "@PROJECT_NAME@: ${@PROJECT_NAME@_NOTFOUND_MESSAGE}")
endif()

check_required_components("@PROJECT_NAME@")
